falc.account.name=JAccount
falc.account.db=LIVE
falc.account.version=0.4.8.1f
#falc.account.standingorder.cron=0 10 08 * * ?
falc.account.standingorder.cron=0 5 */4 * * ?

spring.application.name=accountapi

spring.jpa.show-sql=false
spring.jpa.properties.hibernate.show_sql=false

# NB could put the DEV setting in this file using so-called multi-document profile
# and the 'hash dash dash dash spring.config.activate.on-profile=dev'
# see: https://spring.io/blog/2020/08/14/config-file-processing-in-spring-boot-2-4
#      https://www.baeldung.com/spring-profiles#3-multi-document-files
# WARNING: LIVE database on minnie: C:/Development/accountDB/acc2003.mdb
spring.datasource.url=jdbc:ucanaccess://C:/Development/accountDB/acc2003.mdb
#;showSchema=true;memory=false

spring.datasource.username=Admin
spring.datasource.password=
spring.datasource.driver-class-name=net.ucanaccess.jdbc.UcanaccessDriver
spring.jpa.properties.hibernate.dialect=net.ucanaccess.hibernate.dialect.UCanAccessDialect

# Don't know if these are actually required but it is working with them so best leave them alone.
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Try to stop SqlExceptionHelper   : Cannot load view Visa BCC(EUR) : user lacks privilege or object not found: FROM
# there is no reason whatsoever for it to be trying to do anything with the stored query called 'Visa BCC(EUR)'
# Solved by using MS-Access to delete the 'stored queries' 
spring.jpa.properties.hibernate.hbm2ddl.auto=none
spring.jpa.properties.hibernate.globally_quoted_identifiers=true

# bunch of values from https://medium.com/@tobias.strg/accessing-ms-access-with-hibernate-5-and-spring-boot-1b58f26ebb7d
spring.jpa.hibernate.ddl-auto=none 
spring.jpa.generate-ddl=false
#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.jpa.properties.hibernate.boot.allow_jdbc_metadata_access=false

# HikariPool-1 - Connection net.ucanaccess.jdbc.UcanaccessConnection@4e83a42f[C:\\Development\\accountDB\\acc2003_TEST.mdb] marked as broken because of SQLSTATE(08503), ErrorCode(-1353)
# after period of inactivity. Need to somehow tell Hikari to reopen the connection or to keep it alive
# Needless to say I got these from Google and have no clue what they do or whether they will help!!
spring.datasource.test-while-idle=true
# spring.datasource.validation-query=SELECT 1;
spring.datasource.time-between-eviction-runs-millis=6000
spring.datasource.remove-abandoned=true
spring.datasource.remove-abandoned-timeout=60

# Documentation: 
# https://www.baeldung.com/spring-boot-hikari
# https://github.com/brettwooldridge/HikariCP?tab=readme-ov-file#gear-configuration-knobs-baby
spring.datasource.hikari.connectionTimeout=30000
spring.datasource.hikari.validationTimeout=5000
spring.datasource.hikari.leakDetectionThreshold=10000

spring.datasource.hikari.maxLifetime=30001
spring.datasource.hikari.idleTimeout=15000
# keepaliveTime >= 30000
spring.datasource.hikari.keepaliveTime=30000

# WTF!? idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
# This means maximumPoolSize > minimumIdle is required for idleTimeout to be used
spring.datasource.hikari.maximumPoolSize=2
spring.datasource.hikari.minimumIdle=0
