falc.account.name=JAccount
falc.account.db=H2
falc.account.version=0.5.01
#   second
#   minute
#   hour
#   day of month
#   month
#   day of week
# "0 10 08 * * ?"  08:10 every day
# "*/10 * * * * *" every 10 seconds
#                               s m  h  d m 
#falc.account.standingorder.cron=0 10 08 * * ?
falc.account.standingorder.cron=0 5 */4 * * ?
# NORMAL (default) or SORTED
falc.account.transaction.listsort=SORTED

spring.application.name=accountapi

spring.jpa.show-sql=false
spring.jpa.properties.hibernate.show_sql=false

# A file based DB which persists between invocations: ;IFEXISTS=TRUE may prevent recreation
# and apparently must be a path spec, just a name by itself appears to result in weird errors
# Probably best to dedicate a directory to the db as multiple files are created. Don't add an
# extension as the created files have an extension added
# Eventually this must be the path to use on the production system - for now it
# is a directory at the level of src.
spring.datasource.url=jdbc:h2:file:./db/testfiledb;DB_CLOSE_DELAY=-1

spring.datasource.name=accounth2db
spring.datasource.username=sa
spring.datasource.password=password
spring.datasource.driverClassName=org.h2.Driver
# this is the default
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Don't know if these are actually required but it is working with them so best leave them alone.
#spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Try to stop SqlExceptionHelper   : Cannot load view Visa BCC(EUR) : user lacks privilege or object not found: FROM
# there is no reason whatsoever for it to be trying to do anything with the stored query called 'Visa BCC(EUR)'
# Solved by using MS-Access to delete the 'stored queries' 
spring.jpa.properties.hibernate.hbm2ddl.auto=none
spring.jpa.properties.hibernate.globally_quoted_identifiers=true

# never: prevents db init from data.sql
spring.sql.init.mode=never

# bunch of values from https://medium.com/@tobias.strg/accessing-ms-access-with-hibernate-5-and-spring-boot-1b58f26ebb7d
# none: production use - no changes to DB to be made by the 'normal' application
spring.jpa.hibernate.ddl-auto=none 
spring.jpa.generate-ddl=false


#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
#spring.jpa.properties.hibernate.boot.allow_jdbc_metadata_access=false


# Try using the defaults for H2 db until some problem requires a modification
# HikariPool-1 - Connection net.ucanaccess.jdbc.UcanaccessConnection@4e83a42f[C:\\Development\\accountDB\\acc2003_TEST.mdb] marked as broken because of SQLSTATE(08503), ErrorCode(-1353)
# after period of inactivity. Need to somehow tell Hikari to reopen the connection or to keep it alive
# Needless to say I got these from Google and have no clue what they do or whether they will help!!
#spring.datasource.test-while-idle=true
## spring.datasource.validation-query=SELECT 1;
#spring.datasource.time-between-eviction-runs-millis=6000
#spring.datasource.remove-abandoned=true
#spring.datasource.remove-abandoned-timeout=60

# Documentation: 
# https://www.baeldung.com/spring-boot-hikari
# https://github.com/brettwooldridge/HikariCP?tab=readme-ov-file#gear-configuration-knobs-baby
#spring.datasource.hikari.connectionTimeout=30000
#spring.datasource.hikari.validationTimeout=5000
#spring.datasource.hikari.leakDetectionThreshold=10000
#spring.datasource.hikari.leak-detection-threshold=120000
#spring.datasource.hikari.maxLifetime=30001
#spring.datasource.hikari.idleTimeout=15000
# keepaliveTime >= 30000
#spring.datasource.hikari.keepaliveTime=30000

# WTF!? idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
# This means maximumPoolSize > minimumIdle is required for idleTimeout to be used
#spring.datasource.hikari.maximumPoolSize=2
#spring.datasource.hikari.minimumIdle=0

# Start the H2 console: use http://localhost:8080/h2-console to access it
# WARNING: requires spring-boot-starter-web in pom although baeldung does not mention this...
spring.h2.console.enabled=true
server.port=8080
server.servlet.context-path=

